////  MediaTableViewCell.m//  ////  Created by Tony  Winslow on 11/21/15.////#import "MediaTableViewCell.h"#import "Media.h"#import "Comment.h"#import "User.h"@interface MediaTableViewCell ()@property (nonatomic, strong) UIImageView *mediaImageView;@property (nonatomic, strong) UILabel *usernameAndCaptionLabel;@property (nonatomic, strong) UILabel *commentLabel;@property (nonatomic, strong) UILabel *firstComment;@endstatic UIFont *lightFont;static UIFont *boldFont;static UIColor *usernameLabelGray;static UIColor *commentLabelGray;static UIColor *linkColor;static UIColor *orangeColor;static NSParagraphStyle *paragraphStyle;@implementation MediaTableViewCell+ (CGFloat) heightForMediaItem:(Media *)mediaItem width:(CGFloat)width {    // Make a cell    MediaTableViewCell *layoutCell = [[MediaTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"layoutCell"];        layoutCell.mediaItem = mediaItem;        layoutCell.frame = CGRectMake(0, 0, width, CGRectGetHeight(layoutCell.frame));    [layoutCell setNeedsLayout];    [layoutCell layoutIfNeeded];        return CGRectGetMaxY(layoutCell.commentLabel.frame);}- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier{    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];    if (self) {        // Initialization code        self.mediaImageView = [[UIImageView alloc] init];        self.usernameAndCaptionLabel = [[UILabel alloc] init];        self.usernameAndCaptionLabel.numberOfLines = 0;        self.usernameAndCaptionLabel.backgroundColor = usernameLabelGray;                self.commentLabel = [[UILabel alloc] init];        self.commentLabel.numberOfLines = 0;        self.commentLabel.backgroundColor = commentLabelGray;                for (UIView *view in @[self.mediaImageView, self.usernameAndCaptionLabel, self.commentLabel]) {            [self.contentView addSubview:view];            view.translatesAutoresizingMaskIntoConstraints = NO;        }                NSDictionary *viewDictionary = NSDictionaryOfVariableBindings(_mediaImageView, _usernameAndCaptionLabel, _commentLabel);                [self.contentView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[_mediaImageView]|" options:kNilOptions metrics:nil views:viewDictionary]];        [self.contentView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[_usernameAndCaptionLabel]|" options:kNilOptions metrics:nil views:viewDictionary]];        [self.contentView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|-5-[_commentLabel]-5-|" options:kNilOptions metrics:nil views:viewDictionary]];                [self.contentView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[_mediaImageView][_usernameAndCaptionLabel][_commentLabel]"options:kNilOptions            metrics:nil views:viewDictionary]];    }    self.imageHeightConstraint = [NSLayoutConstraint constraintWithItem:_mediaImageView                                                              attribute:NSLayoutAttributeHeight                                                              relatedBy:NSLayoutRelationEqual                                                                 toItem:nil                                                              attribute:NSLayoutAttributeNotAnAttribute                                                             multiplier:1                                                               constant:100];        //ask about this         self.imageWidthConstraint = [NSLayoutConstraint constraintWithItem: _mediaImageView                                                             attribute: NSLayoutAttributeWidth                                                             relatedBy:NSLayoutRelationEqual                                                                toItem:nil                                                             attribute:NSLayoutAttributeNotAnAttribute                                                            multiplier:1                                                              constant:100];        self.imageHeightConstraint.identifier = @"Image height constraint";        self.usernameAndCaptionLabelHeightConstraint = [NSLayoutConstraint constraintWithItem:_usernameAndCaptionLabel                                                                                attribute:NSLayoutAttributeHeight                                                                                relatedBy:NSLayoutRelationEqual                                                                                   toItem:nil                                                                                attribute:NSLayoutAttributeNotAnAttribute                                                                               multiplier:1                                                                                 constant:100];        //is this aligned properly?    self.usernameAndCaptionLabelHeightConstraint.identifier = @"Username and caption label height constraint";        self.commentLabelHeightConstraint = [NSLayoutConstraint constraintWithItem:_commentLabel                                                                     attribute:NSLayoutAttributeHeight                                                                     relatedBy:NSLayoutRelationEqual                                                                        toItem:nil                                                                     attribute:NSLayoutAttributeNotAnAttribute                                                                    multiplier:1                                                                      constant:100];    self.commentLabelHeightConstraint.identifier = @"Comment label height constraint";        [self.contentView addConstraints:@[self.imageHeightConstraint, self.usernameAndCaptionLabelHeightConstraint, self.commentLabelHeightConstraint, self.imageWidthConstraint]];    return self;}+ (void)load {    lightFont = [UIFont fontWithName:@"HelveticaNeue-Thin" size:11];    boldFont = [UIFont fontWithName:@"HelveticaNeue-Bold" size:11];    usernameLabelGray = [UIColor colorWithRed:0.933 green:0.933 blue:0.933 alpha:1];    commentLabelGray = [UIColor colorWithRed:0.898 green:0.898 blue:0.898 alpha:1];    linkColor = [UIColor colorWithRed:0.345 green:0.314 blue:0.427 alpha:1];    orangeColor = [UIColor colorWithRed:1.0 green:0.5 blue:0.0 alpha:1];        NSMutableParagraphStyle *mutableParagraphStyle = [[NSMutableParagraphStyle alloc] init];    mutableParagraphStyle.headIndent = 20.0;    mutableParagraphStyle.firstLineHeadIndent = 20.0;    mutableParagraphStyle.tailIndent = -20.0;    mutableParagraphStyle.paragraphSpacingBefore = 5;        paragraphStyle = mutableParagraphStyle;}- (NSAttributedString *) usernameAndCaptionString {    // #1    CGFloat usernameFontSize = 15;        // #2 - Make a string that says "username caption"    NSString *baseString = [NSString stringWithFormat:@"%@ %@", self.mediaItem.user.userName, self.mediaItem.caption];        // #3 - Make an attributed string, with the "username" bold    NSMutableAttributedString *mutableUsernameAndCaptionString = [[NSMutableAttributedString alloc] initWithString:baseString attributes:@{NSFontAttributeName : [lightFont fontWithSize:usernameFontSize], NSParagraphStyleAttributeName : paragraphStyle}];        // #4    NSRange usernameRange = [baseString rangeOfString:self.mediaItem.user.userName];    [mutableUsernameAndCaptionString addAttribute:NSFontAttributeName value:[boldFont fontWithSize:usernameFontSize] range:usernameRange];    [mutableUsernameAndCaptionString addAttribute:NSForegroundColorAttributeName value:linkColor range:usernameRange];        float spacing = 5.0f;        [mutableUsernameAndCaptionString addAttribute:NSKernAttributeName                             value:@(spacing)                             range:NSMakeRange(0, [mutableUsernameAndCaptionString length])];                    return mutableUsernameAndCaptionString;}-(NSAttributedString *) commentString {    NSMutableAttributedString *commentString = [[NSMutableAttributedString alloc] init];        for (Comment *comment in self.mediaItem.comments) {              NSString *baseString = [NSString stringWithFormat:@"%@ %@\n", comment.from.userName, comment.text];               NSMutableAttributedString *oneCommentString = [[NSMutableAttributedString alloc] initWithString:baseString attributes:@{NSFontAttributeName : lightFont, NSParagraphStyleAttributeName : paragraphStyle}];                NSRange usernameRange = [baseString rangeOfString:comment.from.userName];        [oneCommentString addAttribute:NSFontAttributeName value:boldFont range:usernameRange];        [oneCommentString addAttribute:NSForegroundColorAttributeName value:linkColor range:usernameRange];                NSMutableParagraphStyle *paragraph = [[NSMutableParagraphStyle alloc] init];                if ([self.mediaItem.comments indexOfObject:comment] % 2 == 0) {                                    paragraph.alignment = NSTextAlignmentRight;                                    }                else {                        paragraph.alignment = NSTextAlignmentLeft;                            }        [oneCommentString addAttribute:NSParagraphStyleAttributeName value:paragraph range:NSMakeRange(0, oneCommentString.length)];                [commentString appendAttributedString:oneCommentString];                NSRange firstCommentRange = [baseString rangeOfString:comment.text];        if ([comment isEqual:self.mediaItem.comments.firstObject]) {            [commentString addAttribute:NSForegroundColorAttributeName value:orangeColor range:firstCommentRange];                                 }        }        return commentString;    }- (void) layoutSubviews {    [super layoutSubviews];        // Before layout, calculate the intrinsic size of the labels (the size they "want" to be), and add 20 to the height for some vertical padding.    CGSize maxSize = CGSizeMake(CGRectGetWidth(self.bounds), CGFLOAT_MAX);    CGSize usernameLabelSize = [self.usernameAndCaptionLabel sizeThatFits:maxSize];    CGSize commentLabelSize = [self.commentLabel sizeThatFits:maxSize];        self.usernameAndCaptionLabelHeightConstraint.constant = usernameLabelSize.height + 20;        self.commentLabelHeightConstraint.constant = commentLabelSize.height + 20;//    self.imageHeightConstraint.constant = self.mediaItem.image.size.height / self.mediaItem.image.size.width * CGRectGetWidth(self.contentView.bounds);    ///this gives you the aspect ratio of your image and multiplies it by the space that you have        // .frame and .bounds are the same--typically want to use frame    ///what math is this doing right above on line 212?            // Hide the line between cells    self.separatorInset = UIEdgeInsetsMake(0, CGRectGetWidth(self.bounds)/2.0, 0, CGRectGetWidth(self.bounds)/2.0);}- (void) setMediaItem:(Media *)mediaItem {    _mediaItem = mediaItem;    self.mediaImageView.image = _mediaItem.image;    self.usernameAndCaptionLabel.attributedText = [self usernameAndCaptionString];    self.commentLabel.attributedText = [self commentString];  }- (void)setSelected:(BOOL)selected animated:(BOOL)animated {    [super setSelected:selected animated:animated];    // Configure the view for the selected state}@end